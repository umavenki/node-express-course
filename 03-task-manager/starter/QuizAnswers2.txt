In this lesson, you created a middleware function called asyncWrapper. Why?
    AsyncWrapper middleware function handles asynchronous function which prevent writing manually try-catch blocks for each route.
    This wrapper automates error handling by calling next().
    It avoids code duplication and makes code more readable and maintainable.
    


Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
       return next(new CustomAPIError(`No task with id:${taskID}`, 404));
  }
  res.status(200).json({ task });
});
  